#!/usr/bin/env python3

import glob, sys, subprocess

def die(*args, **kwargs):
    sys.stderr.write(" ".join(args) + "\n")
    for (key, value) in kwargs.items():
        sys.stderr.write(f"{key} = {value}\n")
    sys.exit(1)

def slurp(path):
    with open(path) as f:
        return f.read()

def run_test(phase, id):
    executable = "./" + phase.split("-")[0]
    input_file = slurp(f"tests/{phase}.input.{id}")
    output_file = slurp(f"tests/{phase}.output.{id}")
    print(f"running test: {phase} {id}...")
    result = subprocess.run([executable], input=input_file,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="UTF-8")
    # check for error
    if result.returncode != 0:
        print(f"test failed with return code {result.returncode}")
    if result.stderr != "":
        print(f"test failed with error {result.stderr}")
    if result.stdout != output_file:
        print(f"expected:\n{output_file}")
        print("-------------")
        print(f"actual:\n{result.stdout}")

input = set()
output = set()
for path in glob.glob("tests/*"):

    name = path[6:]
    phase, role, id = name.split(".")
    # print(phase, role, id)

    if role == "input":
        input.add((phase, id))
    elif role == "output":
        output.add((phase, id))
    else:
        die("bad path; neither input nor output.", path = path)

unmatched_inputs = input - output
if unmatched_inputs:
    die(f"unmatched inputs: {unmatched_inputs}")

unmatched_outputs = output - input
if unmatched_outputs:
    die(f"unmatched outputs: {unmatched_output}")

# if len(input) != len(output):
#     die("inputs and outputs not same size.", inputs = len(input), outputs = len(output))

tokenizer_tests = []
parser_tests = []
interpreter_tests = []
for key in input:
    if key in output:
        phase, id = key
        if phase == "tokenizer-test":
            tokenizer_tests.append(key)
        elif phase == "parser-test":
            parser_tests.append(key)
        elif phase == "interpreter-test":
            interpreter_tests.append(key)
        else:
            die("not a tokenizer, parser, or intepreter?!?", id=id, phase=phase)

(tokenizer_tests).sort()
for phase, id in tokenizer_tests:
    run_test(phase, id)
