(define mergesort
  (letrec ((sort-helper
            (lambda (f L length)
              (letrec (;; (split-at) does the same thing as (divide) in the
                       ;; other merge-sort function
                       (split-at
                        (lambda (L n)
                          (letrec ((split-at-helper
                                     (lambda (L n left)
                                       (if (= 0 n)
                                           (cons left L)
                                           (split-at-helper (cdr L)
                                                            (- n 1)
                                                            (cons (car L)
                                                                  left))))))
                            (split-at-helper L n ()))))

                       ;; same as in the other merge-sort function
                       (merge
                        (lambda (f L M)
                          (letrec ((merge-helper
                                    (lambda (f L M result)
                                      (cond
                                        ((and (null? L) (null? M))
                                         result)
                                        ((or
                                          (null? L)
                                          (and (not (null? M))
                                               (f (car M) (car L))))
                                         (merge-helper f L (cdr M) (append
                                                                      result
                                                                      (list (car M)))))
                                        (else
                                         (merge-helper f (cdr L) M (append
                                                                      result
                                                                      (list (car L)))))))))
                            (merge-helper f L M ()))))
                       (middle (floor (/ length 2)))
                       (halves (split-at L middle)))

                ;; merges the (sorted) left and right halves of the list
                (if (< length 2)
                     L
                     (merge f
                            (sort-helper f (car halves) middle)
                            (sort-helper f (cdr halves) (- length middle))))))))

    (lambda (f L)
      (sort-helper f L (length L)))))
