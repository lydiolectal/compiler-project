(define append
  (lambda (L M)
    (if (null? L)
        M
        (cons (car L)
              (append (cdr L) M)))))

(define reverse
  (lambda (L)
    (if (null? L)
        L
        (append (reverse (cdr L))
                (list (car L))))))

;;; Reverse L, and store the result in the list result as we go.
(define reverse-helper
  (lambda (L result)
    (if (null? L)
        result
        (reverse-helper (cdr L)
                        (cons (car L) result)))))

(define reverse-better
  (lambda (L)
    (reverse-helper L (quote ()))))

(define (range a b)
  (if (< b a)
      (quote ())
      (cons a (range (+ a 1) b))))

(define fact
  (lambda (n)
    (letrec ((fact-helper
               (lambda (n result)
                 (if (= n 0)
                     result
                     (fact-helper (- n 1) (* result n))))))
      (fact-helper n 1))))


(define length
  (lambda (L)
    (if (null? L)
        0
        (+ 1 (length (cdr L))))))

(define length
  (lambda (L)
    (letrec ((helper (lambda (L result)
                       (if (null? L)
                           result
                           (helper (cdr L) (+ 1 result))))))
      (helper L 0))))

(define foo
  (lambda (L)
    (define x 3)
    x))