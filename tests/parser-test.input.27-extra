(define append
  (lambda (L M)
    (if (null? L)
        M
        (cons (car L)
              (append (cdr L) M)))))

(define append
  (lambda (L M)
    (letrec ((reverse
              (lambda (L result)
                (if (null? L)
                    result
                    (reverse (cdr L)
                             (cons (car L) result)))))
             ("append-first-reversed"
              (lambda (reverse-me onto-here)
                (if (null? reverse-me)
                    onto-here
                    ("append-first-reversed" (cdr reverse-me)
                                           (cons (car reverse-me )
                                                 onto-here))))))
      (let ((L-reversed (reverse L (quote()))))
        ("append-first-reversed" L-reversed M)))))

(append (quote(1 2 3)) (quote(4 5 6)))